<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo搭建blogs</title>
    <url>/2021/04/19/hexo%E6%90%AD%E5%BB%BAblogs/</url>
    <content><![CDATA[<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ol>
<li>注册github 账号，建立名为”username.github.io”的仓库</li>
<li>将来你的网址就是：<a href="http://username.github.io">http://username.github.io</a></li>
</ol>
<p>注意：</p>
<ol>
<li>注册的邮箱一定要验证，否则不会成功；</li>
<li>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名；</li>
<li>仓库创建成功不会立即生效，需要过一段时间才会生效；</li>
</ol>
<span id="more"></span>
<h2 id="准备Git和配置SSH-Key"><a href="#准备Git和配置SSH-Key" class="headerlink" title="准备Git和配置SSH Key"></a>准备Git和配置SSH Key</h2><ol>
<li><p>下载安装<a href="https://gitforwindows.org/">git for windows</a></p>
</li>
<li><p>打开git  bash, 输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure>
<p>连续三次回车，打开用户目录下 <code>.ssh\id_rsa.pub</code>文件，用记事本打开，复制里面的内容。</p>
</li>
<li><p>打开github主页，进入setting — SSH and GPG keys — New SSH key:</p>
<p>输入刚才复制的内容</p>
</li>
<li><p>打开git  bash, 输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>输入yes，若显示”You’ve successfully authenticated, but GitHub does not provide shell access.“</p>
<p>则表示SSH配置成功。</p>
</li>
</ol>
<h2 id="准备Node-js和Hexo"><a href="#准备Node-js和Hexo" class="headerlink" title="准备Node.js和Hexo"></a>准备Node.js和Hexo</h2><ol>
<li><p>下载安装<a href="https://nodejs.org/en/download/">Node.js</a></p>
<p>打开cmd 输入，验证是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载安装<a href="https://hexo.io/">Hexo</a>，新建一个hexo文件夹，在该文件夹内打开git bash，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>完成后，输入， hexo会自动下载一些文件到这个目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>生成、启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g #生成</span><br><span class="line">hexo s #启动 打开 http:&#x2F;&#x2F;localhost:4000 即可看到内容</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><ol>
<li><p>修改配置文件，/hexo/_config.yml，修改deploy部分为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:liuxianan/liuxianan.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>插件安装</p>
<p>打开git bash，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传</p>
<p>打开git bash 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<p>进入：<a href="http://username.github.io">http://username.github.io</a>，即可看到自己的博客页面了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>next主题代码块复制功能</title>
    <url>/2021/04/19/next%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p><strong>在next主题配置文件<code>_config.yml</code>中，启用 <code>copy_button</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="comment"># Show text copy result.</span></span><br><span class="line">  <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">  <span class="attr">style:</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>next主题搜索功能</title>
    <url>/2021/04/19/next%E4%B8%BB%E9%A2%98%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search  --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在hexo站点主配置文件<code>_config.yml</code>,在文件末尾添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>在next主题配置文件<code>_config.yml</code>中，启用 <code>local_search</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>next主题数学公式显示</title>
    <url>/2021/04/19/next%E4%B8%BB%E9%A2%98%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="更换渲染引擎"><a href="#更换渲染引擎" class="headerlink" title="更换渲染引擎"></a>更换渲染引擎</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="修改node-modules-kramed-lib-rules-inline-js文件"><a href="#修改node-modules-kramed-lib-rules-inline-js文件" class="headerlink" title="修改node_modules\kramed\lib\rules\inline.js文件"></a>修改node_modules\kramed\lib\rules\inline.js文件</h2><p>把第11行的escape变量的值做相应的修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line">  <span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>
<p>把第20行的em变量做相应的修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">  em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<h2 id="在主题中开启mathjax开关"><a href="#在主题中开启mathjax开关" class="headerlink" title="在主题中开启mathjax开关"></a>在主题中开启mathjax开关</h2><p>到博客根目录下，找到<code>themes/next/_config.yml</code>，把<code>math</code>默认的flase修改为true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Equations Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">mathjax</span></span><br></pre></td></tr></table></figure>
<h2 id="更换-mathjax-版本"><a href="#更换-mathjax-版本" class="headerlink" title="更换 mathjax 版本"></a>更换 mathjax 版本</h2><p>在<code>\themes\next\_config.yml</code> 中的 <code>vendors</code> 结点下修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mathjax:</span> <span class="string">https://cdn.jsdelivr.net/npm/mathjax@2.7.8/unpacked/MathJax.js?config=TeX-MML-AM_CHTML</span></span><br></pre></td></tr></table></figure>
<h2 id="解决行间公式不渲染问题"><a href="#解决行间公式不渲染问题" class="headerlink" title="解决行间公式不渲染问题"></a>解决行间公式不渲染问题</h2><p>进入<code>\themes\next\layout\_third-party\math\mathjax.swig</code> 进行修改，<code>window.MathJax</code>改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.MathJax &#x3D; &#123;</span><br><span class="line">     tex2jax: &#123;</span><br><span class="line">       inlineMath: [ [&#39;$&#39;,&#39;$&#39;], [&quot;\\(&quot;,&quot;\\)&quot;] ],</span><br><span class="line">       processEscapes: true</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="在文章的Front-matter里打开mathjax开关"><a href="#在文章的Front-matter里打开mathjax开关" class="headerlink" title="在文章的Front-matter里打开mathjax开关"></a>在文章的Front-matter里打开mathjax开关</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: index.html</span><br><span class="line">date: 2018-12-5 01:30:30</span><br><span class="line">tags:</span><br><span class="line">mathjax: true</span><br><span class="line">--</span><br></pre></td></tr></table></figure>
<h2 id="重新部署Hexo"><a href="#重新部署Hexo" class="headerlink" title="重新部署Hexo"></a>重新部署Hexo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d  #生成并部署hexo</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>pip换源</title>
    <url>/2021/04/19/pip%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<h2 id="采用国内源，加速下载模块的速度"><a href="#采用国内源，加速下载模块的速度" class="headerlink" title="采用国内源，加速下载模块的速度"></a>采用国内源，加速下载模块的速度</h2><p>1、常用pip源：</p>
<p>— 豆瓣：<a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a> </p>
<p>— 阿里：<a href="https://mirrors.aliyun.com/pypi/simple">https://mirrors.aliyun.com/pypi/simple</a> </p>
<p>2、加速安装的命令： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple 模块名</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="永久配置安装源"><a href="#永久配置安装源" class="headerlink" title="永久配置安装源"></a><strong>永久配置安装源</strong></h2><p>1、文件管理器文件路径地址栏敲：%APPDATA% 回车，</p>
<p>​        进入 C:\Users\电脑用户\AppData\Roaming 文件夹中 </p>
<p>2、新建 pip 文件夹并在文件夹中新建 pip.ini 配置文件 </p>
<p>3、新增 pip.ini 配置文件内容 </p>
<h2 id="MacOS、Linux"><a href="#MacOS、Linux" class="headerlink" title="MacOS、Linux"></a>MacOS、Linux</h2><p>1、在用户根目录下 ~ 下创建 .pip 隐藏文件夹，如果已经有了可以跳过 — mkdir ~/.pip </p>
<p>2、进入 .pip 隐藏文件夹并创建 pip.conf 配置文件 — cd ~/.pip &amp;&amp; touch pip.conf </p>
<p>3、启动 Finder(访达) 按 cmd+shift+g 来的进入，输入 ~/.pip 回车进入</p>
<p>4、新增 pip.conf 配置文件内容 “””</p>
<h2 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[global] </span><br><span class="line">index-url = http://pypi.douban.com/simple </span><br><span class="line">[install] </span><br><span class="line">use-mirrors =true </span><br><span class="line">mirrors =http://pypi.douban.com/simple/ </span><br><span class="line">trusted-host =pypi.douban.com</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vs配置opencv</title>
    <url>/2021/04/19/vs%E9%85%8D%E7%BD%AEopencv/</url>
    <content><![CDATA[<h2 id="新建vs属性表文件opencv-props"><a href="#新建vs属性表文件opencv-props" class="headerlink" title="新建vs属性表文件opencv.props"></a>新建vs属性表文件<code>opencv.props</code></h2><p>内容如下，将其中的目录换为你自己的opencv目录即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">ToolsVersion</span>=<span class="string">&quot;4.0&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImportGroup</span> <span class="attr">Label</span>=<span class="string">&quot;PropertySheets&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Label</span>=<span class="string">&quot;UserMacros&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">IncludePath</span>&gt;</span>D:\Dev\opencv\opencv\build\include;$(IncludePath)<span class="tag">&lt;/<span class="name">IncludePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LibraryPath</span>&gt;</span>D:\Dev\opencv\opencv\build\x64\vc15\lib;$(LibraryPath)<span class="tag">&lt;/<span class="name">LibraryPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemDefinitionGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AdditionalDependencies</span>&gt;</span>opencv_world3410d.lib;%(AdditionalDependencies)<span class="tag">&lt;/<span class="name">AdditionalDependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemDefinitionGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="添加属性表"><a href="#添加属性表" class="headerlink" title="添加属性表"></a>添加属性表</h2><p>将<code>opencv.props</code>拷贝到工程目录下，vs中点击 <code>视图</code> —&gt; <code>其它窗口</code> —&gt; <code>属性窗口</code></p>
<p>在属性窗口中为debug或者release右键添加现有属性表，选择<code>opencv.props</code>文件</p>
<h2 id="添加头文件"><a href="#添加头文件" class="headerlink" title="添加头文件"></a>添加头文件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs/imgcodecs.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>光线通信第二章总结</title>
    <url>/2021/04/19/%E5%85%89%E7%BA%A4%E9%80%9A%E4%BF%A1%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>公式：</p>
<span id="more"></span>
<script type="math/tex; mode=display">
相对折射率差\quad\triangle = \frac{n_1-n_2}{n_1}\\
数值孔径\quad NA=\sqrt{n_1^2-n_2^2} \approx n_1\sqrt{2\triangle} \\
最大时延差\quad \triangle\tau_{max}=\frac{L}{2n_1c}(NA)^2 \approx \frac{n_1L}{c}\triangle\\
截止波长\quad \lambda_c=\frac{2\pi a\sqrt{n_1^2-n_2^2}}{V_c}=\frac{2\pi aNA}{V_c}\\
单模传输条件\quad V=\frac{2\pi a\sqrt{n_1^2-n_2^2}}{\lambda}\leq2.405\\
\qquad \\
\qquad \\
3dB光纤带宽\quad f_{3dB}=B=\frac{441}{\triangle\tau}\\
光纤损耗系数\quad \alpha=\frac{10}{L}lg\frac{P_i}{P_o}\quad ->\quad \frac{P_i}{P_o}=10^{\frac{\alpha L}{10}}\\
均方根脉冲宽度\quad \quad \sigma=\frac{\triangle\tau}{2.355}\\
带宽距离积\quad =B\times L\\</script>]]></content>
      <categories>
        <category>光纤通信</category>
      </categories>
  </entry>
  <entry>
    <title>常用Hexo命令</title>
    <url>/2021/04/19/%E5%B8%B8%E7%94%A8hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="缩写形式"><a href="#缩写形式" class="headerlink" title="缩写形式"></a>缩写形式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure>
<h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>PyTorch实现所有ResNet</title>
    <url>/2021/04/20/PyTorch%E5%AE%9E%E7%8E%B0%E6%89%80%E6%9C%89ResNet/</url>
    <content><![CDATA[<h2 id="导入所需模块"><a href="#导入所需模块" class="headerlink" title="导入所需模块"></a>导入所需模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchsummary <span class="keyword">import</span> summary</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="基类ResNet和BasicBlock"><a href="#基类ResNet和BasicBlock" class="headerlink" title="基类ResNet和BasicBlock"></a>基类ResNet和BasicBlock</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet, self).__init__()</span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">7</span>, stride=<span class="number">2</span>, padding=<span class="number">3</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>),</span><br><span class="line">        )</span><br><span class="line">        self.conv2_x = nn.Sequential()</span><br><span class="line">        self.conv3_x = nn.Sequential()</span><br><span class="line">        self.conv4_x = nn.Sequential()</span><br><span class="line">        self.conv5_x = nn.Sequential()</span><br><span class="line">        self.AvgPool = nn.AdaptiveAvgPool2d((<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        self.fc = nn.Linear(<span class="number">512</span>, num_classes)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.conv2_x(out)</span><br><span class="line">        out = self.conv3_x(out)</span><br><span class="line">        out = self.conv4_x(out)</span><br><span class="line">        out = self.conv5_x(out)</span><br><span class="line">        out = self.AvgPool(out)</span><br><span class="line">        out = out.view(out.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        out = self.fc(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BasicBlock, self).__init__()</span><br><span class="line">        self.seq = nn.Sequential()</span><br><span class="line">        self.shortcut = nn.Sequential()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.seq(x)</span><br><span class="line">        out += self.shortcut(x)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure>
<h2 id="建立ResNet18-34的BasicBlock"><a href="#建立ResNet18-34的BasicBlock" class="headerlink" title="建立ResNet18-34的BasicBlock"></a>建立ResNet18-34的BasicBlock</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock1</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inchannel, outchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BasicBlock1, self).__init__()</span><br><span class="line">        <span class="comment">#直线</span></span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(outchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                )</span><br><span class="line">        <span class="comment">#实线捷径</span></span><br><span class="line">        </span><br><span class="line">        self.shortcut = nn.Sequential()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock2</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inchannel, outchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BasicBlock2, self).__init__()</span><br><span class="line">         <span class="comment">#直线</span></span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(outchannel),</span><br><span class="line">                nn.ReLU(),</span><br><span class="line">                nn.Conv2d(outchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(outchannel),</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">#虚线捷径</span></span><br><span class="line">        self.shortcut = nn.Sequential(</span><br><span class="line">                nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(outchannel),</span><br><span class="line">                nn.ReLU(),</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>
<h2 id="ResNet18"><a href="#ResNet18" class="headerlink" title="ResNet18"></a>ResNet18</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet18</span>(<span class="params">ResNet</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet18, self).__init__(num_classes=num_classes)</span><br><span class="line">        <span class="comment">#conv2_x</span></span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">64</span>)</span><br><span class="line">        <span class="comment">#conv3_x</span></span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">64</span>,<span class="number">128</span>)</span><br><span class="line">        <span class="comment">#conv4_x</span></span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">128</span>,<span class="number">256</span>)</span><br><span class="line">        <span class="comment">#conv5_x</span></span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">256</span>,<span class="number">512</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_make_layer</span>(<span class="params">self,inchannel,outchannel,blocks=<span class="number">2</span></span>):</span></span><br><span class="line">        layers = []</span><br><span class="line">        <span class="keyword">if</span> inchannel != outchannel:</span><br><span class="line">            blocks = blocks -<span class="number">1</span></span><br><span class="line">            layers.append(BasicBlock2(inchannel,outchannel))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(blocks):</span><br><span class="line">            layers.append(BasicBlock1(outchannel,outchannel))</span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line">    </span><br><span class="line">summary(ResNet18(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>
<h2 id="ResNet34"><a href="#ResNet34" class="headerlink" title="ResNet34"></a>ResNet34</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet34</span>(<span class="params">ResNet18</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet18, self).__init__(num_classes=num_classes)</span><br><span class="line">        <span class="comment">#conv2_x</span></span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="comment">#conv3_x</span></span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">64</span>,<span class="number">128</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="comment">#conv4_x</span></span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">128</span>,<span class="number">256</span>,<span class="number">6</span>)</span><br><span class="line">        <span class="comment">#conv5_x</span></span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">256</span>,<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">summary(ResNet34(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))        </span><br></pre></td></tr></table></figure>
<h2 id="建立ResNet50-151的BottleNeck"><a href="#建立ResNet50-151的BottleNeck" class="headerlink" title="建立ResNet50-151的BottleNeck"></a>建立ResNet50-151的BottleNeck</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottleNeck1</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,inchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BottleNeck1,self).__init__()</span><br><span class="line">        </span><br><span class="line">        midchannel = inchannel</span><br><span class="line">        inchannel = inchannel*<span class="number">4</span></span><br><span class="line">        outchannel = inchannel</span><br><span class="line">        </span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, midchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, midchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, outchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.shortcut = nn.Sequential()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottleNeck2</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,inchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BottleNeck2,self).__init__()</span><br><span class="line">        </span><br><span class="line">        stride = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> inchannel != <span class="number">64</span>:</span><br><span class="line">            midchannel = inchannel</span><br><span class="line">            inchannel  = inchannel*<span class="number">2</span></span><br><span class="line">            outchannel = inchannel*<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inchannel  = inchannel</span><br><span class="line">            midchannel = inchannel</span><br><span class="line">            outchannel = inchannel*<span class="number">4</span></span><br><span class="line">            stride = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, midchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, midchannel, kernel_size=<span class="number">3</span>, stride=stride, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, outchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">        )</span><br><span class="line">        self.shortcut = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">1</span>, stride=stride, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">        )</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<h2 id="ResNet50"><a href="#ResNet50" class="headerlink" title="ResNet50"></a>ResNet50</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet50</span>(<span class="params">ResNet</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet50, self).__init__(num_classes=num_classes)</span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">128</span>,<span class="number">4</span>)</span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">256</span>,<span class="number">6</span>)</span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">        self.fc = nn.Linear(<span class="number">2048</span>, num_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_make_layer</span>(<span class="params">self,inchannel,blocks=<span class="number">3</span></span>):</span></span><br><span class="line">        layers = []</span><br><span class="line">        blocks = blocks -<span class="number">1</span></span><br><span class="line">        layers.append(BottleNeck2(inchannel))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(blocks):</span><br><span class="line">            layers.append(BottleNeck1(inchannel))</span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line">summary(ResNet50(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>
<h2 id="ResNet101"><a href="#ResNet101" class="headerlink" title="ResNet101"></a>ResNet101</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet101</span>(<span class="params">ResNet50</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet101, self).__init__(num_classes=num_classes)</span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">128</span>,<span class="number">4</span>)</span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">256</span>,<span class="number">23</span>)</span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">summary(ResNet101(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>
<h2 id="ResNet151"><a href="#ResNet151" class="headerlink" title="ResNet151"></a>ResNet151</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet151</span>(<span class="params">ResNet50</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet151, self).__init__(num_classes=num_classes)</span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">128</span>,<span class="number">8</span>)</span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">256</span>,<span class="number">36</span>)</span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">summary(ResNet151(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ResNet</category>
      </categories>
  </entry>
  <entry>
    <title>ResNet详解和实现</title>
    <url>/2021/04/20/ResNet/</url>
    <content><![CDATA[<h2 id="残差神经网络-ResNet"><a href="#残差神经网络-ResNet" class="headerlink" title="残差神经网络(ResNet)"></a>残差神经网络(ResNet)</h2><p>残差神经网络的主要贡献是发现了“退化现象（Degradation）”，并针对退化现象发明了 “快捷连接（Shortcut connection）”，极大的消除了深度过大的神经网络训练困难问题。神经网络的“深度”首次突破了100层、最大的神经网络甚至超过了1000层。</p>
<h2 id="ResNet网络架构"><a href="#ResNet网络架构" class="headerlink" title="ResNet网络架构"></a>ResNet网络架构</h2><p>Shortcut Connection）是ResNet的一大亮点，其实用捷径的方式，使得计算H(x) = F(x)+x，这一改变使得模型的在不断增加深度的情况下，退化也不会非常严重。基本的残差结构如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/drogon-bot12138/blog-images/blog-images/ResNet1.jpg" style="zoom:80%;" /></p>
<span id="more"></span>
<p>论文中，不同深度的残差网络机构如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/drogon-bot12138/blog-images/blog-images/ResNet2.jpg" style="zoom:25%;" /></p>
<h2 id="ResNet详细结构图"><a href="#ResNet详细结构图" class="headerlink" title="ResNet详细结构图"></a>ResNet详细结构图</h2><p>ResNet18和ResNet34是两种不同的残差网络，单看论文里面的结构可能难以理解，更不用说构建了，这里给出了详细的实现图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/drogon-bot12138/blog-images/blog-images/ResNet3.jpg" alt=""></p>
<h2 id="构建基类"><a href="#构建基类" class="headerlink" title="构建基类"></a>构建基类</h2><p>ResNet中，包含两种模块，一种是上图中，旁边伴随有实现的模块，其特点是输入和输出的维度是一致的记为<code>BasicBlock1</code>，另一种是上图中虚线部分的，也就是输入和输出的维度不一样的部分，我们记为<code>BasicBlock2</code></p>
<p>采用面向对象的设计方法，考虑到ResNet中预处理和最后的全连层处理部分都是相同的，即都是把输入为（3，224，224）的图像卷积、池化后变成（64，56，56）的特征向量。因此建立基类<code>ResNet</code></p>
<p>对于模块<code>BasicBlock1</code>、<code>BasicBlock2</code>，我们可以看到其都是具有H(x)=F(x)+x的形式，以此也为其建立基类<code>BasicBlock</code></p>
<h3 id="导入所需模块"><a href="#导入所需模块" class="headerlink" title="导入所需模块"></a>导入所需模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchsummary <span class="keyword">import</span> summary</span><br></pre></td></tr></table></figure>
<h3 id="构建基类ResNet和BasicBlock"><a href="#构建基类ResNet和BasicBlock" class="headerlink" title="构建基类ResNet和BasicBlock"></a>构建基类ResNet和BasicBlock</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet, self).__init__()</span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">7</span>, stride=<span class="number">2</span>, padding=<span class="number">3</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>),</span><br><span class="line">        )</span><br><span class="line">        self.conv2_x = nn.Sequential()</span><br><span class="line">        self.conv3_x = nn.Sequential()</span><br><span class="line">        self.conv4_x = nn.Sequential()</span><br><span class="line">        self.conv5_x = nn.Sequential()</span><br><span class="line">        self.AvgPool = nn.AdaptiveAvgPool2d((<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        self.fc = nn.Linear(<span class="number">512</span>, num_classes)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.conv2_x(out)</span><br><span class="line">        out = self.conv3_x(out)</span><br><span class="line">        out = self.conv4_x(out)</span><br><span class="line">        out = self.conv5_x(out)</span><br><span class="line">        out = self.AvgPool(out)</span><br><span class="line">        out = out.view(out.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        out = self.fc(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BasicBlock, self).__init__()</span><br><span class="line">        self.seq = nn.Sequential()<span class="comment">#直线</span></span><br><span class="line">        self.shortcut = nn.Sequential()<span class="comment">#捷径</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.seq(x)</span><br><span class="line">        out += self.shortcut(x)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure>
<h2 id="实现ResNet18-34的两种BasicBlock模块"><a href="#实现ResNet18-34的两种BasicBlock模块" class="headerlink" title="实现ResNet18-34的两种BasicBlock模块"></a>实现ResNet18-34的两种BasicBlock模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类型一，输入、输出维度相同</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock1</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inchannel, outchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BasicBlock1, self).__init__()</span><br><span class="line">        <span class="comment">#直线</span></span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(outchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                )</span><br><span class="line">        <span class="comment">#实线捷径</span></span><br><span class="line">        self.shortcut = nn.Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment">#类型二，输入、输出维度不同        </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock2</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inchannel, outchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BasicBlock2, self).__init__()</span><br><span class="line">         <span class="comment">#直线</span></span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(outchannel),</span><br><span class="line">                nn.ReLU(),</span><br><span class="line">                nn.Conv2d(outchannel, outchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(outchannel),</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">#虚线捷径</span></span><br><span class="line">        self.shortcut = nn.Sequential(</span><br><span class="line">                nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(outchannel),</span><br><span class="line">                nn.ReLU(),</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>
<h2 id="ResNet18"><a href="#ResNet18" class="headerlink" title="ResNet18"></a>ResNet18</h2><p>利用<code>BasicBlock</code>、<code>BasicBlock2</code>构建<strong>ResNet18</strong>，其中<code>summary</code>用于查看模型结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet18</span>(<span class="params">ResNet</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet18, self).__init__(num_classes=num_classes)</span><br><span class="line">        <span class="comment">#conv2_x</span></span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">64</span>)</span><br><span class="line">        <span class="comment">#conv3_x</span></span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">64</span>,<span class="number">128</span>)</span><br><span class="line">        <span class="comment">#conv4_x</span></span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">128</span>,<span class="number">256</span>)</span><br><span class="line">        <span class="comment">#conv5_x</span></span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">256</span>,<span class="number">512</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_make_layer</span>(<span class="params">self,inchannel,outchannel,blocks=<span class="number">2</span></span>):</span></span><br><span class="line">        layers = []</span><br><span class="line">        <span class="keyword">if</span> inchannel != outchannel:</span><br><span class="line">            blocks = blocks -<span class="number">1</span></span><br><span class="line">            layers.append(BasicBlock2(inchannel,outchannel))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(blocks):</span><br><span class="line">            layers.append(BasicBlock1(outchannel,outchannel))</span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line">    </span><br><span class="line">summary(ResNet18(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>
<h2 id="ResNet34"><a href="#ResNet34" class="headerlink" title="ResNet34"></a>ResNet34</h2><p>利用<code>ResNet18</code>构建<strong>ResNet34</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet34</span>(<span class="params">ResNet18</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet18, self).__init__(num_classes=num_classes)</span><br><span class="line">        <span class="comment">#conv2_x</span></span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="comment">#conv3_x</span></span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">64</span>,<span class="number">128</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="comment">#conv4_x</span></span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">128</span>,<span class="number">256</span>,<span class="number">6</span>)</span><br><span class="line">        <span class="comment">#conv5_x</span></span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">256</span>,<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">summary(ResNet34(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))        </span><br></pre></td></tr></table></figure>
<h2 id="实现ResNet50-151的两种BottleNeck模块"><a href="#实现ResNet50-151的两种BottleNeck模块" class="headerlink" title="实现ResNet50-151的两种BottleNeck模块"></a>实现ResNet50-151的两种BottleNeck模块</h2><p><code>BottleNeck</code>模块与<code>BasicBlokc</code>模块有所不同，每个模块中包三层卷积层，模块内部有维度的变化，从ResNet50结构图来看，只有第一层的输入维度和卷积参数有所不同，其余模块都是类似的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#维度未发生改变的模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottleNeck1</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,inchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BottleNeck1,self).__init__()</span><br><span class="line">        </span><br><span class="line">        midchannel = inchannel</span><br><span class="line">        inchannel = inchannel*<span class="number">4</span></span><br><span class="line">        outchannel = inchannel</span><br><span class="line">        </span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, midchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, midchannel, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, outchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.shortcut = nn.Sequential()</span><br><span class="line"><span class="comment">#维度发生改变的模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottleNeck2</span>(<span class="params">BasicBlock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,inchannel</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BottleNeck2,self).__init__()</span><br><span class="line">        </span><br><span class="line">        stride = <span class="number">2</span></span><br><span class="line">        <span class="comment">#对第一层，做特殊处理</span></span><br><span class="line">        <span class="keyword">if</span> inchannel != <span class="number">64</span>:</span><br><span class="line">            midchannel = inchannel</span><br><span class="line">            inchannel  = inchannel*<span class="number">2</span></span><br><span class="line">            outchannel = inchannel*<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inchannel  = inchannel</span><br><span class="line">            midchannel = inchannel</span><br><span class="line">            outchannel = inchannel*<span class="number">4</span></span><br><span class="line">            stride = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        self.seq = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, midchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, midchannel, kernel_size=<span class="number">3</span>, stride=stride, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(midchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Conv2d(midchannel, outchannel, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">        )</span><br><span class="line">        self.shortcut = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(inchannel, outchannel, kernel_size=<span class="number">1</span>, stride=stride, padding=<span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(outchannel),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
<h2 id="ResNet50"><a href="#ResNet50" class="headerlink" title="ResNet50"></a>ResNet50</h2><p>利用<code>BottleNeck1</code>、<code>BottleNeck1</code>构建<strong>ResNet50</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet50</span>(<span class="params">ResNet</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet50, self).__init__(num_classes=num_classes)</span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">128</span>,<span class="number">4</span>)</span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">256</span>,<span class="number">6</span>)</span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">        self.fc = nn.Linear(<span class="number">2048</span>, num_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_make_layer</span>(<span class="params">self,inchannel,blocks=<span class="number">3</span></span>):</span></span><br><span class="line">        layers = []</span><br><span class="line">        blocks = blocks -<span class="number">1</span></span><br><span class="line">        layers.append(BottleNeck2(inchannel))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(blocks):</span><br><span class="line">            layers.append(BottleNeck1(inchannel))</span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line">summary(ResNet50(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>
<h2 id="ResNet101"><a href="#ResNet101" class="headerlink" title="ResNet101"></a>ResNet101</h2><p>利用<code>ResNet50</code>构建<strong>ResNet101</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet101</span>(<span class="params">ResNet50</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet101, self).__init__(num_classes=num_classes)</span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">128</span>,<span class="number">4</span>)</span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">256</span>,<span class="number">23</span>)</span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">summary(ResNet101(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>
<h2 id="ResNet151"><a href="#ResNet151" class="headerlink" title="ResNet151"></a>ResNet151</h2><p>利用<code>ResNet50</code>构建<strong>ResNet151</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet151</span>(<span class="params">ResNet50</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet151, self).__init__(num_classes=num_classes)</span><br><span class="line">        self.conv2_x = self._make_layer(<span class="number">64</span>,<span class="number">3</span>)</span><br><span class="line">        self.conv3_x = self._make_layer(<span class="number">128</span>,<span class="number">8</span>)</span><br><span class="line">        self.conv4_x = self._make_layer(<span class="number">256</span>,<span class="number">36</span>)</span><br><span class="line">        self.conv5_x = self._make_layer(<span class="number">512</span>,<span class="number">3</span>)</span><br><span class="line">summary(ResNet151(<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ResNet</category>
      </categories>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/05/05/test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e1a81976191c8e6eb021fbc9e7ad666f044f32a369f256494c040c60b3d42fc3">bd25ed9264b080267271e137e33d0ce18f3dbb41a8a4203af98a09ddcdccf6d3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Only you know the code</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>马克思主义基本原理</title>
    <url>/2021/06/08/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p><code>Type</code>：选择题 20x1、多选题 15x2 、 简答题 3x10、论述题 20x1</p>
<h3 id="导论："><a href="#导论：" class="headerlink" title="导论："></a>导论：</h3><ol>
<li><p>马克思主义的创立与发展</p>
<p>马克思主义包括：马克思主义哲学、马克思主义政治经济学、科学社会主义 三个基本组成部分</p>
<p>马克思主义是由马克思和恩格斯创立并为后继者所不断发展的科学理论体系，是关于自然、社会和人类思维发展一般规律的学说，是关于社会主义必然替代资本主义、最终实现共产主义的学说，是关于无产阶级解放、全人类解放和每个人自由而全面发展的学说，是指引人们创造美好生活的行动指南。</p>
</li>
<li><p>马克思主义的鲜明特征</p>
<ol>
<li>科学性——马克思主义是对自然、社会和人类思维发展本质和规律的正确反映</li>
<li>革命性——马克思主义的革命性，集中表现为它的彻底的批判精神和鲜明的无产阶级立场</li>
<li>实践性——马克思主义是从实践中来，到实践中去，在实践中接受检验，并随实践不断发展的学说</li>
<li>人民性——人民至上是马克思主义的政治立场。马克思主义政党把人民放在心中最高位置，一切奋斗都致力于实现广大人民的根本利益。</li>
<li>发展性——马克思主义是不断发展的学说，具有与时俱进的理论品质。马克思主义是时代的产物，并随时代、实践和科学的发展而不断发展。</li>
</ol>
</li>
</ol>
<span id="more"></span>
<h3 id="第一章-世界的物质性及发展规律："><a href="#第一章-世界的物质性及发展规律：" class="headerlink" title="第一章 世界的物质性及发展规律："></a>第一章 世界的物质性及发展规律：</h3><h4 id="世界多样性与物质统一性："><a href="#世界多样性与物质统一性：" class="headerlink" title="世界多样性与物质统一性："></a>世界多样性与物质统一性：</h4><ol>
<li><p>近代哲学的基本问题——思维和存在的问题</p>
<p>根据存在和思维谁是世界的本质，根据不同的回答构成了划分唯物主义和唯心主义的标准。</p>
<p>根据存在和思维有没有同一性，根据不同的回答构成了划分可知论和不可知论的标准。</p>
</li>
<li><p>物质与意识的辨证关系</p>
<p>物质决定意识</p>
<p>从本质来看，意识是人脑这样一种特殊物质的机能和属性，是客观世界的主观映像</p>
<pre><code> 1. 意识在内容上是客观的，在形式上是主观的，是客观内容和主观形式的统一
 2. 意识是物质的产物，但又不是物质本身
 3. 意识对物质具有反作用
 4. 主观能动性和客观规律性的统一
</code></pre></li>
<li><p>世界的物质统一性</p>
<ol>
<li>意识统一于物质</li>
<li><strong>人类社会也统一于物质</strong></li>
</ol>
<p>人类社会的物质性着重表现在：1. 人类社会是物质世界的组成部分；2. 人类获取生活资料的活动是物质性的活动；3. 人类社会存在和发展的基础是物质资料的生产方式</p>
</li>
</ol>
<h4 id="事物的联系和发展："><a href="#事物的联系和发展：" class="headerlink" title="事物的联系和发展："></a>事物的联系和发展：</h4><ol>
<li><p>事物的普遍联系——联系是指事物内部各要素之间和事物之间相互影响、相互制约、相互作用的关系。</p>
<p>​    联系具有客观性、普遍性、多样性、条件性</p>
</li>
<li><p>事物的变化发展——发展是进步的、上升的运动，发展的实质是新事物的产生和旧事物的灭亡。</p>
<p>​    新事物是不可战胜的：</p>
<ol>
<li>就新事物与环境的关系而言，新事物之所以新是因为有新的要素、结构和功能，它适应已经变化了的环境和条件；旧事物之所以旧，是因为它的各种要素和功能已经不适应环境和客观条件的变化，走向灭亡就成为不可避免的。</li>
<li>就新事物与旧事物的关系而言，新事物是在旧事物的”母体“中孕育成熟的，它既否定了旧事物中消极腐朽的东西，又保留了旧事物中合理、适应新条件的因素，并添加了旧事物所不能容纳的新内容。</li>
</ol>
</li>
</ol>
<h4 id="对立统一规律是事物发展的根本规律："><a href="#对立统一规律是事物发展的根本规律：" class="headerlink" title="对立统一规律是事物发展的根本规律："></a>对立统一规律是事物发展的根本规律：</h4><pre><code> 1. 唯物辩证法的基本规律主要有：对立统一规律、量变质变规律、否定之否定规律
 2. 矛盾的同一性和斗争性及其在事物发展中的作用
</code></pre><ol>
<li>矛盾的同一性和斗争性<pre><code>        1. 矛盾的同一性是指矛盾双方相互依存、相互贯通的性质和趋势
        2. 矛盾的斗争性是矛盾着的对立面相互排斥、相互分离的性质和趋势
</code></pre></li>
<li>不同的条件下，矛盾的同一性和斗争性所处的地位会有所不同</li>
<li>矛盾的普遍性和特殊性是辩证统一的关系。矛盾的普遍性即矛盾的共性，矛盾的特殊性即矛盾的个性。</li>
</ol>
<h3 id="第二章-实践与认识及其发展规律："><a href="#第二章-实践与认识及其发展规律：" class="headerlink" title="第二章 实践与认识及其发展规律："></a>第二章 实践与认识及其发展规律：</h3><h4 id="实践与认知："><a href="#实践与认知：" class="headerlink" title="实践与认知："></a>实践与认知：</h4><ol>
<li><p>实践是人类能动的改造世界的社会性活动，具有直接现实性、自觉能动性和社会历史性三个基本特征。</p>
</li>
<li><p>实践是认识的基础，实践在认识活动中起着决定性的作用，具体表现为：</p>
<ol>
<li>实践是认识的来源。认识的内容是在实践活动的基础上产生和发展的。</li>
<li>实践是认识发展的动力。实践需要推动认识的产生和发展，推动人类的科学和技术发明，推动人类的思想进步和理论创新。</li>
<li>实践是认识的目的。人们通过实践获得认识，其最终目的是为实践服务，指导实践，以满足人们生活和生产的需要。</li>
<li>实践是检验真理的唯一标准。真理的标准只能是社会实践。</li>
</ol>
<h4 id="实践的本质与过程："><a href="#实践的本质与过程：" class="headerlink" title="实践的本质与过程："></a>实践的本质与过程：</h4></li>
<li><p>辩证唯物主义认识论具有两个突出的特点：</p>
<ol>
<li>把实践的观点引入认识论</li>
<li>把辩证法应用于反映论和考察认识的发展过程</li>
</ol>
<p>辩证唯物主义认识论认为，认识的本质是主体在实践基础上对客体的能动反映。</p>
</li>
<li><p>认识的第一次飞跃：从生动的直观到抽象的思维</p>
<p>感性认识和理性认识是人对客观世界的两种不同水平的反映形式，也是认识过程的两个不同阶段。</p>
</li>
<li><p>认识的第二次飞跃：即由精神到物质的阶段，由思想到存在的阶段</p>
<p>从认识到实践的飞跃，必要性和重要性：</p>
<ol>
<li>认识世界的目的是为了改造世界</li>
<li>认识的真理性只有在实践中才能得到检验和发展</li>
</ol>
</li>
<li><p>实践和认知的关系是双向的，实践决定认识，认识对实践具有反作用，并且具有相对的独立性</p>
<h4 id="真理与价值："><a href="#真理与价值：" class="headerlink" title="真理与价值："></a>真理与价值：</h4></li>
<li><p>真理，是最符合实际永恒不变的正确的道理，即客观事物及其规律</p>
<ol>
<li>客观性——真理是客观的，凡真理都是客观真理。真理的对象具有客观性、真理的过程、真理的结果都具有客观性</li>
<li>绝对性和相对性——真理的绝对性和相对性是辩证统一的的。<ol>
<li>绝对性，对于谬误而言的，是一种正确的认知。</li>
<li>相对性，从真理的广度和深度的角度而言的，不断的过程</li>
</ol>
</li>
<li>真理与谬误——真理与谬误是人类认识中的一对永恒矛盾，它们之间是既对立又统一</li>
</ol>
</li>
<li><p>价值，是主体与客体之间的一种特定关系，表现为人与满足其某种需要的客体之间的意义关系。</p>
<p>价值的基本特性：</p>
<ol>
<li>主体性——价值的主体性是指价值直接同主体相联系，始终以主体为中心。</li>
<li>客观性——价值的客观性是指在一定条件下客体对于主体意义不依赖于主体的主观意识而存在。</li>
<li>多维性——价值的多维性是指每个主体的价值关系具有多样性。</li>
<li>社会历史性——主体和客体的不断变化决定了价值的社会历史性特点。</li>
</ol>
</li>
</ol>
<h4 id="第三章-人类社会及其发展规律："><a href="#第三章-人类社会及其发展规律：" class="headerlink" title="第三章 人类社会及其发展规律："></a>第三章 人类社会及其发展规律：</h4><h4 id="社会基本矛盾及其运动规律："><a href="#社会基本矛盾及其运动规律：" class="headerlink" title="社会基本矛盾及其运动规律："></a>社会基本矛盾及其运动规律：</h4><ol>
<li><p>社会存在和社会意识的关系</p>
<ol>
<li><p>社会存在决定社会意识，社会意识是社会存在的反映，社会意识对于社会存在而言，具有相对的独立性，对社会意识具有反作用。其关系一定是双向的，正向的一定是决定性的，反向的是具有相对的独立性，并且具有反作用。</p>
</li>
<li><p>社会存也称社会物质生活条件，包括自然地理环境、人口因素和物质生产方式，物质生产方式是决定社会存在决定社会进步与否的决定性力量？<strong>why</strong></p>
<p>首先，物质生产方活动及生产方式是人类社会赖以存在和发展的基础，是人类其他一切活动的首要前提。其次，物质生产活动及生产方式决定着社会的结构、性质和面貌，制约着人们的经济活动、政治生活和精神生活等全部社会生活。最后，物质生产活动及生产方式的变化发展决定整个社会历史的变化发展，决定社会形态从低级向高级的更替和发展</p>
</li>
</ol>
</li>
<li><p>生产力生产关系的矛盾运动及其规律</p>
<ol>
<li><p>生产力是人类在生产实践中形成的改造和影响自然以使其适合社会需要的物质力量</p>
</li>
<li><p>生产关系是人们在物质生产过程中形成的不以人的意志为转移的经济关系</p>
<p>生产关系是社会关系中最基本的关系，政治关系、家庭关系、宗教关系等其它社会关系都受生产关系的支配和制约</p>
</li>
<li><p>生产力决定生产关系，生产关系对生产力具有能动的反作用</p>
</li>
</ol>
</li>
<li><p>经济基础与上层建筑的矛盾及其规律</p>
<ol>
<li>经济基础是指由社会一定发展阶段的生产力所决定的生产关系的总和</li>
<li>上层建筑是建立在一定经济基础上的意识形态以及与之相应的制度、组织和设施。</li>
<li>关系：经济基础决定上层建筑、上层建筑对经济基础具有反作用、经济基础与上层建筑的相互作用构成二者的矛盾运动、经济基础和上层建筑之间的内在联系构成了上层建筑一定适合经济基础状况的规律。</li>
</ol>
</li>
</ol>
<h4 id="社会历史发展的动力："><a href="#社会历史发展的动力：" class="headerlink" title="社会历史发展的动力："></a>社会历史发展的动力：</h4><ol>
<li><p>社会基本矛盾在历史发展中的作用 ——生产力&amp;生产关系、经济基础&amp;上层建筑 之间的矛盾</p>
<ol>
<li>生产力是社会基本矛盾运动中最基本的动力因素，是人类社会发展和进步的最终决定力量。<pre><code>2. 社会基本矛盾特别是生产力和生产关系的矛盾，决定着社会中其他矛盾的存在和发展。
3. 社会基本矛盾具有不同的表现形式和解决方式，并从根本上影响和促进社会形态的变化和发展。
</code></pre></li>
</ol>
</li>
<li><p>阶级斗争和社会革命在阶级社会发展中的作用</p>
<ol>
<li><p>阶级斗争是社会基本矛盾在阶级社会中的表现，是阶级社会发展的直接动力。</p>
<pre><code>2. 社会革命是阶级斗争发展到一定阶段的产物，是推动社会发展的重要动力。
</code></pre></li>
<li><p>科学技术在社会发展中的作用</p>
<ol>
<li><p>科技革命是推动经济社会和社会发展的强大杠杆</p>
<p>科技革命对社会的影响</p>
<ol>
<li>对生产方式产生了深刻的影响。改变了社会生产力的构成要素，改变人们的劳动形式，改变社会经济结构。</li>
<li>对生活方式产生了巨大的影响。</li>
<li>促进了思维方式的变革</li>
</ol>
</li>
</ol>
<p>总之，科学技术是社会发展的重要动力。</p>
</li>
</ol>
</li>
</ol>
<h3 id="第四章-资本主义的本质及规律："><a href="#第四章-资本主义的本质及规律：" class="headerlink" title="第四章 资本主义的本质及规律："></a>第四章 资本主义的本质及规律：</h3><h4 id="商品经济和价值规律："><a href="#商品经济和价值规律：" class="headerlink" title="商品经济和价值规律："></a>商品经济和价值规律：</h4><ol>
<li><p>商品经济是以交换为目的而进行生产的经济形式，它是一定社会历史条件的产物。</p>
<p>商品是用来交换、能满足人的某种需要的劳动产品，是具有使用价值和价值两个因素或两种属性，是使用价值和价值的矛盾统一体。</p>
<p>具体劳动和抽象劳动也是对立统一的关系。具体劳动是指生产一定使用价值的具体形式的劳动。抽象劳动是指撇开一切具体形式的，无差别的一般人类劳动，即人的脑力和体力的耗费。</p>
</li>
</ol>
<h4 id="价值规律及其作用："><a href="#价值规律及其作用：" class="headerlink" title="价值规律及其作用："></a>价值规律及其作用：</h4><ol>
<li>价值规律是商品生产和商品交换的基本规律，遵循等价交换的原则。</li>
<li>价值规律的作用：<ol>
<li>自发地调节生产资料和劳动力在社会各生产部门之间的分配比例</li>
<li>自发地刺激社会生产力的发展。</li>
<li>自发地调节社会收入的分配。</li>
</ol>
</li>
</ol>
<h3 id="第五章-资本主义的发展趋势："><a href="#第五章-资本主义的发展趋势：" class="headerlink" title="第五章 资本主义的发展趋势："></a>第五章 资本主义的发展趋势：</h3><h4 id="第二次世界大战后资本主义变化的新特点："><a href="#第二次世界大战后资本主义变化的新特点：" class="headerlink" title="第二次世界大战后资本主义变化的新特点："></a>第二次世界大战后资本主义变化的新特点：</h4><ol>
<li><p>新的表现</p>
<ol>
<li>生产资料所有制变化。——法人资本所有制崛起并成为居主导地位的资本所有制形式。国家资本所有制控制基础设施和公共事业部门，对社会经济发展有着重要的影响。<pre><code>2. 劳资关系和分配关系的变化。
3. 社会阶层和阶级结构的变化。
4. 经济调节机制和经济危机形态的变化。开始对经济进行全面干预
5. 政治制度的变化。多元化、公民权利有所扩大
</code></pre></li>
</ol>
</li>
<li><p>变化的原因和实质</p>
<ol>
<li>科学技术革命和生产力的发展，是当代资本主义发生新变化的根本推动力量。<pre><code>2. 工人阶级争取自身权利和利益的斗争，是推动当代资本主义发生新变化的重要力量。
3. 社会主义制度初步显示的优越性对当代资本主义产生了重要影响。
4. 主张改良主义的政党对资本主义制度的改革，也对当代资本主义新变化发挥了重要作用。
</code></pre></li>
</ol>
</li>
</ol>
<p>​    </p>
<h3 id="第六章-社会主义的发展及其规律："><a href="#第六章-社会主义的发展及其规律：" class="headerlink" title="第六章 社会主义的发展及其规律："></a>第六章 社会主义的发展及其规律：</h3><h4 id="社会主义五百年的历史进程："><a href="#社会主义五百年的历史进程：" class="headerlink" title="社会主义五百年的历史进程："></a>社会主义五百年的历史进程：</h4><ol>
<li><p>社会主义从空想到科学</p>
<p>空想社会主义：16世纪初——19世纪上半叶到达顶峰  </p>
<p>1516年 英国人 托马斯·莫尔——《乌托邦》</p>
<p>1602年 意大利人 康帕内拉——《太阳城》</p>
<p>18世纪 法国人 摩莱里——《自然法典》   马布利——《论法制或法律的原则》</p>
<p>19世纪  代表人物：法国——圣西门、傅立叶；英国——欧文；</p>
<h4 id="经济文化相对落后国家建设社会主义的长期性："><a href="#经济文化相对落后国家建设社会主义的长期性：" class="headerlink" title="经济文化相对落后国家建设社会主义的长期性："></a>经济文化相对落后国家建设社会主义的长期性：</h4><ol>
<li><p>原因：</p>
<ol>
<li>生产力发展状况的制约。</li>
<li>经济基础和上层建筑发展状况的制约。</li>
<li>国际环境的严峻挑战。</li>
<li>马克思主义执政党对社会主义发展道路的探索和对社会主义建设规律的认识，需要一个长期的过程。</li>
</ol>
</li>
</ol>
<p>对于经济文化相对落后的国家建设社会主义的长期性，必须有充分的估计。</p>
</li>
</ol>
<h3 id="第七章-共产主义崇高理想及其最终实现："><a href="#第七章-共产主义崇高理想及其最终实现：" class="headerlink" title="第七章 共产主义崇高理想及其最终实现："></a>第七章 共产主义崇高理想及其最终实现：</h3><h4 id="实现共产主义是长期的过程："><a href="#实现共产主义是长期的过程：" class="headerlink" title="实现共产主义是长期的过程："></a>实现共产主义是长期的过程：</h4><ol>
<li><p>共产主义一定要实现，共产主义一定能实现，但共产主义的实现是一个十分漫长而且充满艰难曲折的历史过程。</p>
</li>
<li><p>实现共产主义必须经历许多历史阶段。</p>
</li>
<li><p>资本主义的灭亡和向社会主义的转变是一个长期的过程。</p>
</li>
<li><p>社会主义的充分发展和最终向共产主义过渡需要很长的历史时期。</p>
</li>
<li><p>社会主义是共产主义的低级阶段，也是实现共产主义的必由之路。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>study</category>
      </categories>
  </entry>
</search>
